version "4.7.1"

// Copyright 2020 - 2022 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
//
//
//===========================================================================

class CBloodHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (!e.Thing) return;
		Actor mo = e.Thing;
		if (!mo.bShootable) return;
		CBlood.Process(mo);
	}
}

//===========================================================================
//
//
//
//===========================================================================

class CBlood : Actor
{
	Default
	{
		+NOINTERACTION
	}

	static void Process(Actor mo)
	{
		String className = "CBlood" .. mo.GetClassName();
		class<Actor> cls = className;

		Actor blood = NULL;

		if (cls)
		{
			blood = Spawn(cls, mo.Pos, NO_REPLACE);
		}

		if (blood)
		{
			mo.bNoBlood = blood.bNoBlood;
			mo.CopyBloodColor(blood);
			blood.Destroy();
		}
	}
}

//===========================================================================
//
// Doom monsters
//
//===========================================================================

class CBloodBaronOfHell : CBlood
{
	Default
	{
		BloodColor "30 67 23";
	}
}

class CBloodHellKnight : CBloodBaronOfHell {}


class CBloodCacodemon : CBlood
{
	Default
	{
		BloodColor "00 00 F9";
	}
}

class CBloodGoreCaco : CBloodCacodemon {}

class CBloodLostSoul : CBlood
{
	Default
	{
		+NOBLOOD
	}
}

//===========================================================================
//
// Chex Quest monsters
// Yes, while GZDoom does define the default blood color inside the MAPINFO,
// it doesn't seem to work correctly with Nash's Gore Mod. So now, we force
// the blood color on the actor level.
//
//===========================================================================

class CBloodChexBlood : CBlood
{
	Default
	{
		BloodColor "3F 7D 39";
		-NOBLOOD
	}
}

class CBloodFlemoidusCommonus : CBloodChexBlood {}
class CBloodFlemoidusBipedicus : CBloodChexBlood {}
class CBloodArmoredFlemoidusBipedicus : CBloodChexBlood {}
class CBloodFlemoidusCycloptisCommonus : CBloodChexBlood {}
class CBloodFlembrane : CBloodChexBlood {}
class CBloodChexSoul : CBloodChexBlood {}

class CBloodFlemoidusCommonusV3 : CBloodChexBlood {}
class CBloodFlemoidusBipedicusV3 : CBloodChexBlood {}
class CBloodArmoredFlemoidusBipedicusV3 : CBloodChexBlood {}
class CBloodFlemoidusStridicus : CBloodChexBlood {}
class CBloodFlemoidusCycloptisCommonusV3 : CBloodChexBlood {}
class CBloodFlemMine : CBloodChexBlood {}
class CBloodSuperCycloptis : CBloodChexBlood {}
class CBloodFlemoidusMaximus : CBloodChexBlood {}
class CBloodFlembraneV3 : CBloodChexBlood {}
class CBloodLarva : CBloodChexBlood {}
class CBloodQuadrumpus : CBloodChexBlood {}
class CBloodSnotfolus : CBloodChexBlood {}
class CBloodFlembomination : CBloodChexBlood {}


class CBloodSmoothBaronOfHell : CBloodBaronOfHell {}
class CBloodSmoothHellKnight : CBloodBaronOfHell {}
class CBloodNewBaronOfHell : CBloodBaronOfHell {}
class CBloodNewHellKnight : CBloodBaronOfHell {}
class CBloodSmoothCacodemon : CBloodCacodemon {}
class CBloodNewCacodemon : CBloodCacodemon {}
class CBloodPainElemental : CBlood
{
	Default
	{
		BloodColor "Black";
	}
}
class CBloodSmoothPain : CBloodPainElemental {}
class CBloodNewPainElemental : CBloodPainElemental {}
class CBloodRevenant : CBlood
{
	Default
	{
		BloodColor "DarkOrange4";
	}
}
class CBloodSmoothRevenant : CBloodRevenant {}
class CBloodNewRevenant : CBloodRevenant {}
class CBloodSmoothLostSoul : CBloodLostSoul {}
class CBloodNewLostSoul : CBloodLostSoul {}

//===========================================================================
//
// Eviternity monsters
// (Submitted by MischiefNight)
//
//===========================================================================

class CBloodAstralCaco : CBlood
{
	Default
	{
		BloodColor "75 75 75";
	}
}

class CBloodNightmareDemon : CBlood
{
	Default
	{
		BloodColor "31 80 65";
	}
}


#include "zscript/NashGoreCommon.zc"
#include "zscript/NashGoreStatics.zc"
#include "zscript/NashGoreHandler.zc"
#include "zscript/NashGoreBlood.zc"
#include "zscript/NashGoreBloodPlane.zc"
#include "zscript/NashGoreGibs.zc"
#include "zscript/NashGoreCrushedGibs.zc"
#include "zscript/NashGoreSquishyGibs.zc"
#include "zscript/NashGoreIceChunk.zc"
#include "zscript/NashGoreLiquidBlood.zc"
#include "zscript/NashGoreWallBlood.zc"
#include "zscript/NashGoreActor.zc"
#include "zscript/NashGoreMenu.zc"
#include "zscript/Weapons.zc"
#include "zscript/Monsters.zc"

// global constants
const STAT_NashGore_Gore = Thinker.STAT_USER + 1;

